コードスタイルと構成
	•	簡潔で技術的なTypeScriptコードを書き、正確な例を示すこと。
	•	クラスを避け、関数型・宣言的プログラミングパターンを用いること。
	•	コードの重複を避け、反復処理やモジュール化を優先すること。
	•	補助動詞を含む説明的な変数名を使う（例：isLoading、hasError）。
	•	ファイル構成は、エクスポートするコンポーネント、サブコンポーネント、ヘルパー、静的コンテンツ、型定義の順に整理すること。
ネーミング規則
	•	ファイル名、コンポーネント名はキャメルケースを使用する（例：components/AuthWizard）。
	•	コンポーネントは名前付きエクスポートを推奨。
TypeScriptの使用
	•	すべてのコードにTypeScriptを使用し、型定義はtypeよりinterfaceを優先する。
	•	enumは避け、マップ（連想配列）を使う。
	•	TypeScriptのinterfaceを用いた関数コンポーネントを使う。
文法とフォーマット
	•	純粋関数には「function」キーワードを使う。
	•	条件分岐で不要な波括弧は避け、単純な文は簡潔な構文を使う。
	•	宣言的なJSXを用いる。
UIとスタイリング
	•	コンポーネントとスタイリングにはShadcn UI、Radix、Tailwindを使う。
	•	Tailwind CSSでレスポンシブデザインを実装し、モバイルファーストのアプローチを採用する。
パフォーマンス最適化
	•	'use client'、'useEffect'、'setState'の使用を最小限にし、React Server Components（RSC）を優先する。
	•	クライアントコンポーネントはSuspenseでラップし、フォールバックを設定する。
	•	重要でないコンポーネントは動的読み込みする。
	•	画像はWebP形式を使い、サイズ情報を含め、遅延読み込み（lazy loading）を実装する。
主要な規約
	•	URLの検索パラメータの状態管理には 'nuqs' を使う。
	•	Web Vitals（LCP、CLS、FID）を最適化する。
	•	'use client' の使用制限：
	•	サーバーコンポーネントとNext.jsのSSRを優先。
	•	Web APIアクセスが必要な小さなコンポーネントのみで使用。
	•	データフェッチや状態管理には使わない。
その他
	•	データフェッチ、レンダリング、ルーティングについてはNext.jsの公式ドキュメントに従うこと。